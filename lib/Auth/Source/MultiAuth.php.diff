--- MultiAuth.php.orig	2019-11-12 12:10:36.000000000 +0100
+++ MultiAuth.php	2019-11-12 14:50:52.000000000 +0100
@@ -1,10 +1,12 @@
 <?php
 
-namespace SimpleSAML\Module\multiauth\Auth\Source;
+namespace SimpleSAML\Module\sgis\Auth\Source;
+use SimpleSAML\SessionHandler;
 
 /**
  * Authentication source which let the user chooses among a list of
  * other authentication sources
+ * SGIS: store selected source in a persistent cookie
  *
  * @author Lorenzo Gil, Yaco Sistemas S.L.
  * @package SimpleSAMLphp
@@ -15,22 +17,22 @@ class MultiAuth extends \SimpleSAML\Auth
     /**
      * The key of the AuthId field in the state.
      */
-    const AUTHID = '\SimpleSAML\Module\multiauth\Auth\Source\MultiAuth.AuthId';
+    const AUTHID = '\SimpleSAML\Module\sgis\Auth\Source\MultiAuth.AuthId';
 
     /**
      * The string used to identify our states.
      */
-    const STAGEID = '\SimpleSAML\Module\multiauth\Auth\Source\MultiAuth.StageId';
+    const STAGEID = '\SimpleSAML\Module\sgis\Auth\Source\MultiAuth.StageId';
 
     /**
      * The key where the sources is saved in the state.
      */
-    const SOURCESID = '\SimpleSAML\Module\multiauth\Auth\Source\MultiAuth.SourceId';
+    const SOURCESID = '\SimpleSAML\Module\sgis\Auth\Source\MultiAuth.SourceId';
 
     /**
      * The key where the selected source is saved in the session.
      */
-    const SESSION_SOURCE = 'multiauth:selectedSource';
+    const SESSION_SOURCE = 'sgis:selectedSource';
 
     /**
      * Array of sources we let the user chooses among.
@@ -43,6 +45,24 @@ class MultiAuth extends \SimpleSAML\Auth
     private $preselect;
 
     /**
+     * Storage for authsource config option remember.source.enabled
+     * selectsource.php pages/templates use this option to present users with a checkbox
+     * to save their choice for the next login request.
+     * @var bool
+     */
+    protected $rememberSourceEnabled = FALSE;
+
+    /**
+     * Storage for authsource config option remember.source.checked
+     * selectsource.php pages/templates use this option
+     * to default the remember source checkbox to checked or not.
+     * @var bool
+     */
+    protected $rememberSourceChecked = FALSE;
+
+    protected $authproc = FALSE;
+
+    /**
      * Constructor for this authentication source.
      *
      * @param array $info Information about this authentication source.
@@ -109,6 +129,35 @@ class MultiAuth extends \SimpleSAML\Auth
                 'css_class' => $css_class,
             ];
         }
+
+        // Get the remember source config options
+        if (isset($config['remember.source.enabled'])) {
+        	$this->rememberSourceEnabled = (string) $config['remember.source.enabled'];
+        }
+        if (isset($config['remember.source.checked'])) {
+        	$this->rememberSourceChecked = (bool) $config['remember.source.checked'];
+        }
+        /* authproc in wayfinder seems to be broken with simplesaml 1.17.7, so hack it here */
+        if (isset($config['authproc'])) {
+        	$this->authproc = $config['authproc'];
+        }
+
+    }
+
+    /**
+     * Getter for the authsource config option remember.source.enabled
+     * @return bool
+     */
+    public function getRememberSourceEnabled() {
+        return $this->rememberSourceEnabled;
+    }
+
+    /**
+     * Getter for the authsource config option remember.source.checked
+     * @return bool
+     */
+    public function getRememberSourceChecked() {
+        return $this->rememberSourceChecked;
     }
 
     /**
@@ -140,7 +189,7 @@ class MultiAuth extends \SimpleSAML\Auth
         /* Redirect to the select source page. We include the identifier of the
          * saved state array as a parameter to the login form
          */
-        $url = \SimpleSAML\Module::getModuleURL('multiauth/selectsource.php');
+        $url = \SimpleSAML\Module::getModuleURL('sgis/selectsource.php');
         $params = ['AuthState' => $id];
 
         // Allows the user to specify the auth source to be used
@@ -190,6 +239,11 @@ class MultiAuth extends \SimpleSAML\Auth
             \SimpleSAML\Session::DATA_TIMEOUT_SESSION_END
         );
 
+        // Save the state so we can to postprocessing
+        $state['sgis:AuthID'] = $state[self::AUTHID];
+        $stateId = \SimpleSAML\Auth\State::saveState($state, self::STAGEID);
+        $state = [ "LoginCompletedHandler" => [ "\SimpleSAML\Module\sgis\Auth\Source\MultiAuth", "resumeAfterLogin" ],
+                   "oldStateId" => $stateId ];
         try {
             $as->authenticate($state);
         } catch (\SimpleSAML\Error\Exception $e) {
@@ -201,6 +255,76 @@ class MultiAuth extends \SimpleSAML\Auth
         \SimpleSAML\Auth\Source::completeAuth($state);
     }
 
+    public static function resumeAfterLogin(array $loginState) {
+        assert(isset($loginState["oldStateId"]));
+
+        $stateId = $loginState["oldStateId"];
+        $state = \SimpleSaml\Auth\State::loadState($stateId, self::STAGEID);
+
+        /*
+         * Now we have the $state-array, and can use it to locate the authentication
+         * source.
+         */
+        $source = \SimpleSAML\Auth\Source::getById($state['sgis:AuthID']);
+        if ($source === null) {
+            /*
+             * The only way this should fail is if we remove or rename the authentication source
+             * while the user is at the login page.
+             */
+            throw new \SimpleSAML\Error\Exception('Could not find authentication source with id ' . $state["sgis:AuthID"]);
+        }
+
+        /*
+         * Make sure that we haven't switched the source type while the
+         * user was at the authentication page. This can only happen if we
+         * change config/authsources.php while an user is logging in.
+         */
+        if (!($source instanceof self)) {
+            throw new \SimpleSAML\Error\Exception('Authentication source type changed.');
+        }
+
+        /*
+         * OK, now we know that our current state is sane. Time to actually log the user in.
+         *
+         * First we check that the user is acutally logged in, and didn't simply skip the login page.
+         */
+        $attributes = $loginState["Attributes"];
+        if ($attributes === null) {
+            /*
+             * The user isn't authenticated.
+             *
+             * Here we simply throw an exception, but we could also redirect the user back to the
+             * login page.
+             */
+            throw new \SimpleSAML\Error\Exception('User not authenticated after login page.');
+        }
+
+        /*
+         * So, we have a valid user. Time to run authproc
+         */
+        $state['Attributes'] = $attributes;
+
+        if ($source->authproc) {
+
+            $pc = new \SimpleSAML\Auth\ProcessingChain(["authproc" => $source->authproc], [], "multiauth");
+            $state['ReturnCall'] = ['\SimpleSAML\Auth\Source', 'completeAuth'];
+            $state['Destination'] = [];
+            $state['Source'] = [];
+
+            $pc->processState($state);
+        }
+
+        /*Time to resume the authentication process where we
+         * paused it in the authenticate()-function above.
+         */
+        \SimpleSAML\Auth\Source::completeAuth($state);
+
+        /*
+         * The completeAuth-function never returns, so we never get this far.
+         */
+        assert(false);
+    }
+
     /**
      * Log out from this authentication source.
      *
@@ -213,10 +337,21 @@ class MultiAuth extends \SimpleSAML\Auth
     {
         assert(is_array($state));
 
+        if ($this->rememberSourceEnabled) {
+            $sessionHandler = SessionHandler::getSessionHandler();
+            $params = $sessionHandler->getCookieParams();
+            $params['expire'] = time();
+            $params['expire'] += -300;
+            setcookie($this->getAuthId() . '-source', "", $params['expire'], $params['path'], $params['domain'], $params['secure'], $params['httponly']);
+        }
+
         // Get the source that was used to authenticate
         $session = \SimpleSAML\Session::getSessionFromRequest();
         $authId = $session->getData(self::SESSION_SOURCE, $this->authId);
 
+        if ($authId === NULL) /* maybe session expired */
+            return;
+
         $source = \SimpleSAML\Auth\Source::getById($authId);
         if ($source === null) {
             throw new \Exception('Invalid authentication source during logout: '.$source);
@@ -237,7 +372,7 @@ class MultiAuth extends \SimpleSAML\Auth
     {
         assert(is_string($source));
 
-        $cookieName = 'multiauth_source_'.$this->authId;
+        $cookieName = 'sgis_source_'.$this->authId;
 
         $config = \SimpleSAML\Configuration::getInstance();
         $params = [
@@ -259,11 +394,19 @@ class MultiAuth extends \SimpleSAML\Auth
      */
     public function getPreviousSource()
     {
-        $cookieName = 'multiauth_source_'.$this->authId;
+        $cookieName = 'sgis_source_'.$this->authId;
         if (array_key_exists($cookieName, $_COOKIE)) {
             return $_COOKIE[$cookieName];
         } else {
             return null;
         }
     }
+
+    public function getConfig() {
+        $config = parent::getConfig();
+
+var_dump($config);die();
+
+        return $config;
+    }
 }
